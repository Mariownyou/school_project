from django.contrib.auth import get_user_model
from django.db import models


User = get_user_model()


class Group(models.Model):
    title = models.CharField(max_length=200, unique=True)
    slug = models.SlugField(max_length=25, unique=True, blank=False, null=False)
    description = models.TextField()

    def __str__(self):
        return self.title


class Category(models.Model):
    group = models.ForeignKey(
        Group,
        on_delete=models.CASCADE,
        related_name='category',
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
        help_text='–í—ã–±–µ—Ä–∏—Ç–µ –ì—Ä—É–ø–ø—É'
    )
    slug = models.SlugField(
        max_length=25, unique=True, blank=False, null=False,
        verbose_name='—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è',
        help_text='–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã. –ü—Ä–æ–±–µ–ª—ã –∑–∞–º–µ–Ω—è–π—Ç–µ "-"'
    )
    title = models.CharField(
        max_length=200, unique=True,
        verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        help_text='–ù–∞–∑–æ–≤–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
    )

    def __str__(self):
        return self.title


class Post(models.Model):
    text = models.TextField()
    title = models.CharField(
        '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        max_length=200, unique=True,
    )
    pub_date = models.DateTimeField(
        'date published',
        auto_now_add=True
    )
    author = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='posts'
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.SET_NULL,
        related_name='posts',
        blank=True, null=True,
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        help_text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ üòâ'
    )
    is_important = models.BooleanField(
        '–ù–æ–≤–æ—Å—Ç—å?',
        default=False,
        help_text='–ü–æ—Å—Ç–∞–≤—Ç–µ –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ –≤–∞–∂–Ω—ã–º',
    )
    image = models.ImageField(
        upload_to='posts/img',
        blank=True, null=True,
        verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞',
        help_text='–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–∫—Ä–∞—Å–∏—Ç –≤–∞—à –ø–æ—Å—Ç'
    )
    video = models.FileField(
        upload_to='posts/video',
        blank=True, null=True,
        verbose_name='–í–∏–¥–µ–æ',
        help_text='–î–æ–±–∞–≤—Ç—å–µ –≤–∏–¥–µ–æ'
    )

    class Meta:
        ordering = ['-pub_date']

    def __str__(self):
        author = self.author
        pub_date = self.pub_date
        text = self.text[50:]
        text_to_print = f'{author}\n{pub_date:%Y-%m-%d %H:%M}\n{text}'
        return text_to_print


class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')
    text = models.TextField('–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', help_text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç ‚ù§')
    created = models.DateTimeField('date published', auto_now_add=True)

    class Meta:
        ordering = ['-created']

    def __str__(self):
        post = self.post
        author = self.author
        text = self.text[50:]
        date = self.created
        text_to_print = f'{post}\n{author}\n{text}\n{date:%Y-%m-%d %H:%M}'
        return text_to_print


class Follow(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='follower', null=True)
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='following', null=True)

    class Meta:
        unique_together = ['user', 'author']
